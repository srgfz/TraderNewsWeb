
//Importo elementos desde script.js que voy a utilizar también para news.html
import { spinner, rapidApiReturn, appendChildFunction } from "./script.js"


//Variables a utilizar de manera global:
let searchBtn = document.getElementById("searchBtn")
let searchInput = document.getElementById("searchInput")
let newsContainer = document.getElementById("news")
let newsOption = document.getElementById("newsOption")
let actionInProgress = false
let news

//*Función para generar cada tarjeta de noticias a partir de un json con todos los datos necesarios
const generateNewsCard = (newsJson) => {
    let newsCard = document.createElement("ARTICLE")
    newsCard.classList.add("newsCard")
    //Imagen de la noticia
    let newsCard__img = document.createElement("IMG")
    newsCard__img.classList.add("newsCard__img")
    newsCard__img.setAttribute("SRC", newsJson.image)
    newsCard.appendChild(newsCard__img)
    //Cuerpo de la noticia
    let newsCard__body = document.createElement("DIV")
    newsCard__body.classList.add("newsCard__body")
    //Título
    let newsCard__title = document.createElement("H3")
    newsCard__title.classList.add("newsCard__title")
    let newsCard__link = document.createElement("A")
    newsCard__link.classList.add("newsCard__link")
    newsCard__link.setAttribute("HREF", newsJson.longURL)
    newsCard__link.setAttribute("TARGET", "_blank")//añado el link a la noticia para que se abra en otra pestaña
    newsCard__link.textContent = newsJson.title
    newsCard__title.appendChild(newsCard__link)
    let newsCard__abstract = document.createElement("UL")
    newsCard__abstract.classList.add("newsCard__abstract")
    newsJson.abstract.map(abstractElement => {//Recorro el abstract para imprimir todos los que tenga
        let abstract__item = document.createElement("LI")
        abstract__item.classList.add("abstract__item")
        abstract__item.textContent = abstractElement
        newsCard__abstract.appendChild(abstract__item)
    })
    //Resumen de la noticia
    let newsCard__summary = document.createElement("P")
    newsCard__summary.classList.add("newsCard__summary")
    newsCard__summary.textContent = newsJson.autoGeneratedSummary
    let newsCard__footer = document.createElement("DIV")
    //Pie de la noticia, compuesto por el autor y la fecha de publicación
    newsCard__footer.classList.add("newsCard__footer")
    let newsCard__author = document.createElement("P")
    newsCard__author.classList.add("newsCard__author")
    newsCard__author.textContent = newsJson.byline
    let newsCard__date = document.createElement("P")
    newsCard__date.classList.add("newsCard__date")
    newsCard__date.textContent = new Date(parseInt(newsJson.published + "000")).toLocaleDateString()//Formateo la fecha
    //Añado todos los elementos a sus respectivos contenedores padres
    appendChildFunction(newsCard__footer, [newsCard__author, newsCard__date])
    appendChildFunction(newsCard__body, [newsCard__title, newsCard__abstract, newsCard__summary, newsCard__footer])
    newsCard.appendChild(newsCard__body)
    return newsCard//Devuelvo la tarjeta completa con todos sus elementso incluidos
}

//*Función que se ejecutará al cargar la página y cada vez que el usuario cambie la categoría de las noticias
//En ella se consulta a la api las noticias para posteriormente generar las distintas tarjetas con su información
const loadNews = async () => {
    actionInProgress = true
    //Muestro el spinner de carga
    spinner.classList.add("displayBlock")
    spinner.classList.remove("displayNone")
    //Borro los elementos que existan en news:
    while (newsContainer.children[0]) {
        newsContainer.children[0].remove()
    }
    //Saco las noticias de la api según el parámetro seleccionado:
    let newsOptionSelected = newsOption.value
    news = await rapidApiReturn("GET", "bb-finance.p.rapidapi.com", `https://bb-finance.p.rapidapi.com/news/list?id=${newsOptionSelected}`)
    //Filtro que las noticias tengan todo lo necesario que quiero mostrar
    news = news.modules.filter(newsInfo => newsInfo.stories.length > 0)
    if (news) {//Si hay noticias
        let frangmentNews = document.createDocumentFragment()
        let countNews = 0
        news.map(newsJson => {
            newsJson.stories.map(newsInfo => {
                if (countNews < 10 && (newsInfo.image && newsInfo.title && newsInfo.longURL && newsInfo.byline && newsInfo.published && newsInfo.autoGeneratedSummary && newsInfo.abstract.length)) {//Como máximo mostraré  noticias y mostraré solo las que tengan todos los elementos necasior que deseo mostrar
                    countNews++
                    frangmentNews.appendChild(generateNewsCard(newsInfo))
                }
            })
        })
        newsContainer.appendChild(frangmentNews)
    }
    //Oculto el spinner de carga
    spinner.classList.remove("displayBlock")
    spinner.classList.add("displayNone")
    actionInProgress = false
}




//*Condtrolador de click encargado de habilitar la búsqueda desde news.html
const handleClick = (ev) => {
    let btn = ev.target
    if ((btn == searchBtn || btn == searchBtn.children[0]) && searchInput.value.trim() !== "" && !actionInProgress) {
        let searchName = searchInput.value.trim()
        location.href = `../index.html?search=${searchName}`;
    }
}


//*LISTENERS
document.addEventListener("click", handleClick)
searchInput.addEventListener("keydown", (ev) => {//Para que realize la búsqueda al hacer intro en el inputSearch
    if (ev.key == "Enter" && searchInput.value.trim() !== "" && !actionInProgress) {
        let searchName = searchInput.value
        location.href = `../index.html?search=${searchName}`;
    }
})

newsOption.addEventListener("change", () => { if (!actionInProgress) { loadNews() } })
document.addEventListener("DOMContentLoaded", loadNews)
